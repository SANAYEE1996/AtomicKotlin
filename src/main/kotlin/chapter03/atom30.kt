package chapter03

import atomictest.eq

private fun Int.add(vararg number: Int):Int{
    return this + number.sum()
}

fun main() {

    17.add(3,5,2) eq 27
}

/**
 * 여러분이 필요한 모든 것 또는 거의 다 제공하는 라이브러리가 있을 때 이 라이브러리에 멤버 함수만
 * 한두 가지 더 있으면 문제를 완벽하게 해결할 수 있을 것 같다고 가정해보자.
 * --> 하지만 이 라이브러리는 우리가 작성한 코드가 아닌데다 소스 코드에 접근할 수도 없고, 변경을 마음대로 제어할 수도 없다.
 *
 * 코틀린 확장함수 (extension function) 는 기존 클래스에 멤버함수를 추가하는 것과 같은 효과를 낸다.
 * 확장할 대상 타입은 수신 객체 타입 (receiver type) 이라고 한다.
 * 확장 함수를 정의하기 위해서는 함수 이름 앞에 수신 객체 타입을 붙여야 한다.
 *
 * fun 수신타입.확장함수( ... ) { .... }
 *
 * 확장 함수는 확장 대상 타입(수신 객체 타입)의 public 원소에만 접근할 수 있다.
 * 따라서 확장은 일반 함수가 할 수 있는 일만 처리할 수 있다.
 *
 * 확장 함수를 사용하는 이유는 오로지 this 를 사용함으로써(또는 생략함으로써) 구문적 편의를 얻기 때문이다.
 * 하지만 이런 syntax sugar 은 강력하다.
 * 호출하는 코드에서 확장 함수는 멤버 함수와 똑같아 보이고, IDE 는 객체에 대해 점 표기법으로
 * 호출할 수 있는 함수 목록에 확장을 포함시켜준다.
 * */